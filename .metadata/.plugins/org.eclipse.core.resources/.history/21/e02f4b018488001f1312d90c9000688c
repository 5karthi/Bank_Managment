package com.BankManag.Controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.GetMapping;

import com.BankManag.entity.Customer;
import com.BankManag.Model.CustomerDTO;
import com.BankManag.service.CustomerService;
import com.BankManag.util.CustomerConverter;

import java.time.LocalDate;

@Controller
public class CustomerController {

    @Autowired
    private CustomerService customerService;

    @Autowired
    private CustomerConverter customerConverter;

    // Create a new customer account with more fields
    @PostMapping("/createAccount")
    public String createAccount(@RequestParam String customerName, @RequestParam String customerEmail,
                                @RequestParam String customerPhone, @RequestParam double balance,
                                @RequestParam String customerAddress, @RequestParam String customerPanNo,
                                @RequestParam long customerAdharNo, @RequestParam String customerDob, 
                                @RequestParam String customerNationality, @RequestParam String customerGender, 
                                Model model) {

        // Parsing LocalDate for the customer's date of birth
        LocalDate dob = LocalDate.parse(customerDob);

        // Creating a new CustomerDTO with the additional fields
        CustomerDTO customerDTO = new CustomerDTO(customer_name, customerEmail, customerPhone, balance, 
                                                  customerAddress, customerPanNo, customerAdharNo, 
                                                  dob, customerNationality, customerGender);
        
        // Convert DTO to entity
        Customer customer = customerConverter.convertToEntity(customerDTO);

        // Service call to create the account
        String result = customerService.createAccount(customer);
        model.addAttribute("message", result);

        return "result";
    }

    @PostMapping("/updateAccount")
    public String updateAccountDetail(@RequestParam int accountId, @RequestParam(required = false) String customerName,
                                      @RequestParam(required = false) String customerEmail,
                                      @RequestParam(required = false) String customerPhone, 
                                      @RequestParam(required = false) String customerAddress,
                                      @RequestParam(required = false) String customerPanNo, 
                                      @RequestParam(required = false) Long customerAdharNo,
                                      @RequestParam(required = false) String customerDob, 
                                      @RequestParam(required = false) String customerNationality,
                                      @RequestParam(required = false) String customerGender, 
                                      Model model) {

        // If provided, parse LocalDate for date of birth
        LocalDate dob = (customerDob != null) ? LocalDate.parse(customerDob) : null;

        // Create a DTO with the provided fields
        CustomerDTO customerDTO = new CustomerDTO(customerName, customerEmail, customerPhone, 0.0, 
                                                  customerAddress, customerPanNo, customerAdharNo, 
                                                  dob, customerNationality, customerGender);
        
        // Convert DTO to entity
        Customer customer = customerConverter.convertToEntity(customerDTO);

        // Update the customer account details
        CustomerDTO updatedCustomer = customerService.updateAccountDetail(accountId, customer);
        model.addAttribute("customer", updatedCustomer);

        return "viewCustomerDetails";
    }

    @GetMapping("/getAccountDetailByCustomerId")
    public String getAccountDetailByCustomerId(@RequestParam int accountId, Model model) {
        CustomerDTO customerDTO = customerService.getAccountDetailByCustomerId(accountId);
        model.addAttribute("customer", customerDTO);
        return "viewCustomerDetails";
    }

    @GetMapping("/checkBalance")
    public String checkBalance(@RequestParam int accountId, Model model) {
        String result = customerService.checkBalanceById(accountId);
        model.addAttribute("message", result);
        return "result";
    }

    @GetMapping("/customerByName")
    public String getCustomerByName(@RequestParam String customerName, Model model) {
        model.addAttribute("customers", customerService.getCustomerByName(customerName));
        return "viewCustomerDetails";  // Should loop over customers to show details
    }
}
